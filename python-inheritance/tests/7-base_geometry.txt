Module: "base_geometry"
======================

Using "BaseGeometry"
--------------------

Import "BaseGeometry" from the "base_geometry" module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Create a BaseGeometry instance:
    >>> bg = BaseGeometry()

Now we use it:

Normal Ops:
    >>> bg.integer_validator("my_int", 12)

Test the area method:
    >>> bg.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

Validate function:
    >>> 'area' in dir(BaseGeometry)
    True
    
    >>> 'integer_validator' in dir(BaseGeometry)
    True

Test area implemented:
    >>> bg2 = BaseGeometry()
    >>> bg2.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

Test the integer_validator method with a no-args:
    >>> bg.integer_validator()
    Traceback (most recent call last):
      File "/usr/lib/python3.8/doctest.py", line 1336, in __run
        exec(compile(example.source, filename, "single",
      File "<doctest 7-base_geometry.txt[8]>", line 1, in <module>
        bg.integer_validator()
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test the integer_validator method with a valid integer:
    >>> bg.integer_validator("test_value", 5)

Test the integer_validator method with a non-integer value:
    >>> bg.integer_validator("test_value", "string")
    Traceback (most recent call last):
        ...
    TypeError: test_value must be an integer

Test the integer_validator method with a negative integer:
    >>> bg.integer_validator("test_value", -5)
    Traceback (most recent call last):
        ...
    ValueError: test_value must be greater than 0

Test the integer_validator method with zero:
    >>> bg.integer_validator("test_value", 0)
    Traceback (most recent call last):
        ...
    ValueError: test_value must be greater than 0

Test the integer_validator method with a valid large integer:
    >>> bg.integer_validator("test_value", 1000000)

Test the integer_validator method with a valid large negative integer:
    >>> bg.integer_validator("test_value", -1000000)
    Traceback (most recent call last):
        ...
    ValueError: test_value must be greater than 0

Test the integer_validator method with a valid float:
    >>> bg.integer_validator("test_value", 3.14)
    Traceback (most recent call last):
        ...
    TypeError: test_value must be an integer

Test the integer_validator with broken args:
    >>> bg.integer_validator("test_value")
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

Test the integer_validator with typo args:
    >>> bg.integer_validator("test_value", val=5)
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() got an unexpected keyword argument 'val'

Test the value being none:
    >>> bg.integer_validator("test_value", None)
    Traceback (most recent call last):
        ...
    TypeError: test_value must be an integer

Test the being True:
    >>> bg.integer_validator("test_value", True)
    Traceback (most recent call last):
        ...
    TypeError: test_value must be an integer

Test get area:
    >>> bg.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

Test with tuple with 1 element:
    >>> bg.integer_validator("test_value", (1,))
    Traceback (most recent call last):
        ...
    TypeError: test_value must be an integer

Test with [3]:
    >>> bg.integer_validator("test_value", [3])
    Traceback (most recent call last):
        ...
    TypeError: test_value must be an integer

Test with {3: 4}:
    >>> bg.integer_validator("test_value", {3: 4})
    Traceback (most recent call last):
        ...
    TypeError: test_value must be an integer
